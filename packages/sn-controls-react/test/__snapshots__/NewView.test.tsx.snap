// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`New view component should render all components 1`] = `
<form
  onSubmit={[Function]}
  style={
    Object {
      "margin": "0 auto",
    }
  }
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    spacing={2}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="InheritableVersioningMode"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <CheckboxGroup
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "AllowExtraValue": false,
            "AllowMultiple": true,
            "Compulsory": false,
            "ControlHint": "sn:VersioningModeChoice",
            "DefaultOrder": 0,
            "Description": "Specify whether the system should create a new version whenever you create or modify a content below this content.",
            "DisplayChoice": "",
            "DisplayName": "Version history",
            "EnumTypeName": "",
            "FieldClassName": "SenseNet.ContentRepository.Fields.InheritableVersioningModeField",
            "Name": "InheritableVersioningMode",
            "Options": Array [
              Object {
                "Enabled": true,
                "Selected": true,
                "Text": "Inherited",
                "Value": "0",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "None",
                "Value": "1",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Major only",
                "Value": "2",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Major and minor",
                "Value": "3",
              },
            ],
            "ReadOnly": false,
            "Type": "ChoiceFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="DisplayName"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <FileName
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "ControlHint": "sn:FileName",
            "DefaultOrder": 0,
            "Description": "Content name. You can set any name you prefer without any restrictions.",
            "DisplayName": "Display Name",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ShortTextField",
            "Name": "DisplayName",
            "OutputMethod": 0,
            "ReadOnly": false,
            "Type": "ShortTextFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Owner"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <ReferenceGrid
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Content owner.",
            "DisplayName": "Owner",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ReferenceField",
            "Name": "Owner",
            "ReadOnly": false,
            "Type": "ReferenceFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Name"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <Name
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": true,
            "ControlHint": "sn:Name",
            "DefaultOrder": 0,
            "Description": "Specify a name that will appear in the address bar of the browser.",
            "DisplayName": "Name",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ShortTextField",
            "Name": "Name",
            "ReadOnly": false,
            "Type": "ShortTextFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Version"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <ShortText
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Version number.",
            "DisplayName": "Version",
            "FieldClassName": "SenseNet.ContentRepository.Fields.VersionField",
            "Name": "Version",
            "ReadOnly": true,
            "Type": "NullFieldSetting",
            "Visible": false,
            "VisibleBrowse": 2,
            "VisibleEdit": 2,
            "VisibleNew": 2,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="SiteRelativeUrl"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <EmptyFieldControl
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "This field is true if content can contain other content.",
            "DisplayName": "Folder",
            "FieldClassName": "SenseNet.ContentRepository.Fields.BooleanField",
            "Name": "SiteRelativeUrl",
            "ReadOnly": true,
            "Type": "NullFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="CheckInComments"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <RichTextEditor
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Comments for a new version.",
            "DisplayName": "Checkin comments",
            "FieldClassName": "SenseNet.ContentRepository.Fields.LongTextField",
            "Name": "CheckInComments",
            "OutputMethod": 0,
            "ReadOnly": false,
            "TextType": "RichText",
            "Type": "LongTextFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Description"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <RichTextEditor
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "ControlHint": "sn:RichText",
            "DefaultOrder": 0,
            "Description": "Description of the content.",
            "DisplayName": "Description",
            "FieldClassName": "SenseNet.ContentRepository.Fields.LongTextField",
            "Name": "Description",
            "ReadOnly": false,
            "Type": "LongTextFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Password"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <Password
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": true,
            "DefaultOrder": 0,
            "Description": "User password.",
            "DisplayName": "Password",
            "FieldClassName": "SenseNet.ContentRepository.Fields.PasswordField",
            "Name": "Password",
            "PasswordHistoryLength": 0,
            "ReadOnly": false,
            "ReenterDescription": "Re-enter password.",
            "ReenterTitle": "Re-enter password",
            "Type": "PasswordFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Hidden"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <BooleanComponent
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "If checked, content will not show up in navigation.",
            "DisplayName": "Hidden",
            "FieldClassName": "SenseNet.ContentRepository.Fields.BooleanField",
            "Name": "Hidden",
            "ReadOnly": false,
            "Type": "NullFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Index"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <NumberComponent
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Content order in navigation. Numbers closer to 0 will appear first.",
            "DisplayName": "Index",
            "FieldClassName": "SenseNet.ContentRepository.Fields.IntegerField",
            "Name": "Index",
            "ReadOnly": false,
            "Type": "IntegerFieldSetting",
            "Visible": false,
            "VisibleBrowse": 2,
            "VisibleEdit": 2,
            "VisibleNew": 2,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="EnableLifespan"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <BooleanComponent
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Specify whether you want to define starting and end date for the validity of this content.",
            "DisplayName": "Enable Lifespan",
            "FieldClassName": "SenseNet.ContentRepository.Fields.BooleanField",
            "Name": "EnableLifespan",
            "ReadOnly": false,
            "Type": "BooleanFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="AllowedChildTypes"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <AllowedChildTypes
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "You can get and set which content types are explicitly allowed to be created under this content. It is a local setting.",
            "DisplayName": "Allowed child types",
            "FieldClassName": "SenseNet.ContentRepository.Fields.AllowedChildTypesField",
            "Name": "AllowedChildTypes",
            "ReadOnly": false,
            "Type": "NullFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Manager"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <TagsInput
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "AllowMultiple": true,
            "AllowedTypes": Array [
              "User",
            ],
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Manager of the user.",
            "DisplayName": "Manager",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ReferenceField",
            "Name": "Manager",
            "ReadOnly": false,
            "SelectionRoots": Array [
              "/Root/IMS",
            ],
            "Type": "ReferenceFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="ModificationDate"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <DatePicker
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DateTimeMode": 2,
            "DefaultOrder": 0,
            "Description": "Content was last modified on this date.",
            "DisplayName": "Modification Date",
            "FieldClassName": "SenseNet.ContentRepository.Fields.DateTimeField",
            "Name": "ModificationDate",
            "ReadOnly": false,
            "Type": "DateTimeFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="ApprovingMode"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <RadioButtonGroup
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "AllowExtraValue": false,
            "AllowMultiple": false,
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "It shows the approval mode of the current content.",
            "DisplayChoice": 1,
            "DisplayName": "Content Approval For Current Content",
            "EnumTypeName": "",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ApprovingModeField",
            "Name": "ApprovingMode",
            "Options": Array [
              Object {
                "Enabled": true,
                "Selected": true,
                "Text": "Inherited",
                "Value": "0",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Off",
                "Value": "1",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "On",
                "Value": "2",
              },
            ],
            "ReadOnly": false,
            "Type": "ChoiceFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="InheritableApprovingMode"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <CheckboxGroup
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "AllowExtraValue": false,
            "AllowMultiple": false,
            "Compulsory": false,
            "ControlHint": "sn:ApprovingModeChoice",
            "DefaultOrder": 0,
            "Description": "Specify whether new or changed content below the current one should remain in a draft state until they have been approved.",
            "DisplayChoice": 2,
            "DisplayName": "Content approval",
            "EnumTypeName": "",
            "FieldClassName": "SenseNet.ContentRepository.Fields.InheritableApprovingModeField",
            "Name": "InheritableApprovingMode",
            "Options": Array [
              Object {
                "Enabled": true,
                "Selected": true,
                "Text": "Inherited",
                "Value": "0",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Off",
                "Value": "1",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "On",
                "Value": "2",
              },
            ],
            "ReadOnly": false,
            "Type": "ChoiceFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="SavingState"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <DropDownList
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "AllowExtraValue": false,
            "AllowMultiple": false,
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "State of multi-step saving.",
            "DisplayChoice": 0,
            "DisplayName": "Saving state",
            "EnumTypeName": "SenseNet.ContentRepository.Storage.ContentSavingState",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ChoiceField",
            "Name": "SavingState",
            "Options": Array [
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Finalized",
                "Value": "0",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Creating",
                "Value": "1",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Modifying",
                "Value": "2",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "ModifyingLocked",
                "Value": "3",
              },
            ],
            "ReadOnly": true,
            "Type": "ChoiceFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="SavingState"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <DropDownList
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "AllowExtraValue": false,
            "AllowMultiple": false,
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "State of multi-step saving.",
            "DisplayName": "Saving state",
            "EnumTypeName": "SenseNet.ContentRepository.Storage.ContentSavingState",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ChoiceField",
            "Name": "SavingState",
            "Options": Array [
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Finalized",
                "Value": "0",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Creating",
                "Value": "1",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "Modifying",
                "Value": "2",
              },
              Object {
                "Enabled": true,
                "Selected": false,
                "Text": "ModifyingLocked",
                "Value": "3",
              },
            ],
            "ReadOnly": true,
            "Type": "ChoiceFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="ExtensionData"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <Textarea
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "You can set extra data in this field which is useful when extending a content.",
            "DisplayName": "Extension data",
            "FieldClassName": "SenseNet.ContentRepository.Fields.LongTextField",
            "Name": "ExtensionData",
            "ReadOnly": false,
            "TextType": "LongText",
            "Type": "LongTextFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="QueryBuilder"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <Textarea
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "ControlHint": "sn:QueryBuilder",
            "DefaultOrder": 0,
            "Description": "You can set extra data in this field which is useful when extending a content.",
            "DisplayName": "Query builder",
            "FieldClassName": "SenseNet.ContentRepository.Fields.LongTextField",
            "Name": "QueryBuilder",
            "ReadOnly": false,
            "Type": "LongTextFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Avatar"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <Avatar
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "ControlHint": "sn:Image",
            "DefaultOrder": 0,
            "Description": "Avatar image of user.",
            "DisplayName": "Avatar",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ImageField",
            "Name": "Avatar",
            "ReadOnly": false,
            "SelectionRoots": Array [
              "/demoavatars",
            ],
            "Type": "NullFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="RateAvg"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <NumberComponent
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Description": "Average rate of the content.",
            "DisplayName": "Average rate",
            "FieldClassName": "SenseNet.ContentRepository.Fields.NumberField",
            "Name": "RateAvg",
            "ReadOnly": false,
            "Type": "NumberFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="ExpectedRevenue"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <NumberComponent
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "Digits": 0,
            "DisplayName": "Expected revenue",
            "FieldClassName": "SenseNet.ContentRepository.Fields.CurrencyField",
            "Format": "en-US",
            "MinValue": 0,
            "Name": "ExpectedRevenue",
            "OutputMethod": 0,
            "ReadOnly": false,
            "Type": "CurrencyFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="Color"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <ColorPicker
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "ControlHint": "Color",
            "DefaultOrder": 0,
            "Description": "Color",
            "DisplayName": "Color",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ColorField",
            "Name": "Color",
            "OutputMethod": 0,
            "ReadOnly": false,
            "Type": "ColorFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="MimeType"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <ShortText
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "DefaultOrder": 0,
            "DisplayName": "Document MIME type",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ShortTextField",
            "Name": "MimeType",
            "OutputMethod": 0,
            "ReadOnly": true,
            "Type": "ShortTextFieldSetting",
            "Visible": false,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      key="HairColor"
      lg={6}
      md={6}
      sm={12}
      xl={6}
      xs={12}
    >
      <ColorPicker
        actionName="new"
        fieldOnChange={[Function]}
        repository="[repository]"
        settings={
          Object {
            "Compulsory": false,
            "ControlHint": "sn:ColorPicker",
            "DefaultOrder": 0,
            "Description": "",
            "DisplayName": "Hair color",
            "FieldClassName": "SenseNet.ContentRepository.Fields.ShortTextField",
            "Name": "HairColor",
            "ReadOnly": false,
            "Type": "ShortTextFieldSetting",
            "Visible": true,
            "VisibleBrowse": 0,
            "VisibleEdit": 0,
            "VisibleNew": 0,
          }
        }
      />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
      lg={12}
      md={12}
      sm={12}
      style={
        Object {
          "textAlign": "right",
        }
      }
      xl={12}
      xs={12}
    >
      <MediaQueryContextConsumer
        minDeviceWidth={700}
      >
        <WithStyles(ForwardRef(Button))
          color="default"
          onClick={[Function]}
          style={
            Object {
              "marginRight": 20,
            }
          }
        >
          Cancel
        </WithStyles(ForwardRef(Button))>
      </MediaQueryContextConsumer>
      <WithStyles(ForwardRef(Button))
        color="secondary"
        type="submit"
        variant="contained"
      >
        Submit
      </WithStyles(ForwardRef(Button))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</form>
`;
