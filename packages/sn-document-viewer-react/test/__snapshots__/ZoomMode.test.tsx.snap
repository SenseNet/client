// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ZoomMode component should render without crashing 1`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <ZoomOutIcon />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={0}
      backButton={
        <ForwardRef(WithStyles)
          disabled={true}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;

exports[`ZoomMode component should render without crashing 2`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <ZoomInIcon />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={1}
      backButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;

exports[`ZoomMode component should render without crashing 3`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <ZoomOutMapIcon />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={1}
      backButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;

exports[`ZoomMode component should render without crashing 4`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <CodeIcon
      style={
        Object {
          "transform": "rotate(90deg)",
        }
      }
    />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={1}
      backButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;

exports[`ZoomMode component should render without crashing 5`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <CodeIcon />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={1}
      backButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;

exports[`ZoomMode component should render without crashing 6`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <AspectRatioIcon />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={1}
      backButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;

exports[`ZoomMode component should render without crashing 7`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    onClick={[Function]}
    title="Zoom mode"
  >
    <ErrorIcon />
  </WithStyles(ForwardRef(IconButton))>
  <WithStyles(ForwardRef(Menu))
    id="zoom-menu"
    onClose={[Function]}
    open={false}
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <ZoomOutMapIcon />
         
      Fit
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <AspectRatioIcon />
        
      Original size
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon
        style={
          Object {
            "transform": "rotate(90deg)",
          }
        }
      />
         
      Fit height
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <CodeIcon />
         
      Fit width
       
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(Divider))
      light={true}
    />
      
    Custom
     
    <br />
    <WithStyles(ForwardRef(MobileStepper))
      activeStep={1}
      backButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomOutIcon) />
        </ForwardRef(WithStyles)>
      }
      nextButton={
        <ForwardRef(WithStyles)
          disabled={false}
          onClickCapture={[Function]}
        >
          <Memo(ZoomInIcon) />
        </ForwardRef(WithStyles)>
      }
      position="static"
      steps={6}
      variant="progress"
    />
  </WithStyles(ForwardRef(Menu))>
</div>
`;
