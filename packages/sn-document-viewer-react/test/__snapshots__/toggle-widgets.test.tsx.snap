// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component ToggleBase should render without crashing 1`] = `
<div
  style={
    Object {
      "display": "inline-block",
    }
  }
>
  <WithStyles(ForwardRef(IconButton))
    color="primary"
    onClick={[Function]}
    title="Test"
  >
    <span>
      Some children
    </span>
  </WithStyles(ForwardRef(IconButton))>
</div>
`;

exports[`Component ToggleComments should render without crashing 1`] = `
<ToggleCommentsWidget
  activeColor="pink"
>
  <ToggleBase
    isVisible={true}
    setValue={[Function]}
    title="Toggle comments"
  >
    <div
      style={
        Object {
          "display": "inline-block",
        }
      }
    >
      <WithStyles(ForwardRef(IconButton))
        color="primary"
        onClick={[Function]}
        title="Toggle comments"
      >
        <ForwardRef(IconButton)
          classes={
            Object {
              "colorInherit": "MuiIconButton-colorInherit",
              "colorPrimary": "MuiIconButton-colorPrimary",
              "colorSecondary": "MuiIconButton-colorSecondary",
              "disabled": "Mui-disabled",
              "edgeEnd": "MuiIconButton-edgeEnd",
              "edgeStart": "MuiIconButton-edgeStart",
              "label": "MuiIconButton-label",
              "root": "MuiIconButton-root",
              "sizeSmall": "MuiIconButton-sizeSmall",
            }
          }
          color="primary"
          onClick={[Function]}
          title="Toggle comments"
        >
          <WithStyles(ForwardRef(ButtonBase))
            centerRipple={true}
            className="MuiIconButton-root MuiIconButton-colorPrimary"
            disabled={false}
            focusRipple={true}
            onClick={[Function]}
            title="Toggle comments"
          >
            <ForwardRef(ButtonBase)
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-colorPrimary"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              disabled={false}
              focusRipple={true}
              onClick={[Function]}
              title="Toggle comments"
            >
              <button
                className="MuiButtonBase-root MuiIconButton-root MuiIconButton-colorPrimary"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                title="Toggle comments"
                type="button"
              >
                <span
                  className="MuiIconButton-label"
                >
                  <ForwardRef(CommentIcon)
                    style={
                      Object {
                        "fill": "pink",
                      }
                    }
                  >
                    <WithStyles(ForwardRef(SvgIcon))
                      style={
                        Object {
                          "fill": "pink",
                        }
                      }
                    >
                      <ForwardRef(SvgIcon)
                        classes={
                          Object {
                            "colorAction": "MuiSvgIcon-colorAction",
                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                            "colorError": "MuiSvgIcon-colorError",
                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                            "root": "MuiSvgIcon-root",
                          }
                        }
                        style={
                          Object {
                            "fill": "pink",
                          }
                        }
                      >
                        <svg
                          aria-hidden={true}
                          className="MuiSvgIcon-root"
                          focusable="false"
                          style={
                            Object {
                              "fill": "pink",
                            }
                          }
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"
                          />
                        </svg>
                      </ForwardRef(SvgIcon)>
                    </WithStyles(ForwardRef(SvgIcon))>
                  </ForwardRef(CommentIcon)>
                </span>
                <WithStyles(memo)
                  center={true}
                >
                  <ForwardRef(TouchRipple)
                    center={true}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(IconButton)>
      </WithStyles(ForwardRef(IconButton))>
    </div>
  </ToggleBase>
</ToggleCommentsWidget>
`;

exports[`Component ToggleRedaction should render without crashing 1`] = `
<ToggleBase
  isVisible={true}
  setValue={[Function]}
  title="Toggle redaction"
>
  <Memo([object Object]) />
</ToggleBase>
`;

exports[`Component ToggleShapes should render without crashing 1`] = `
<ToggleBase
  isVisible={true}
  setValue={[Function]}
  title="Toggle shapes"
>
  <Memo([object Object]) />
</ToggleBase>
`;

exports[`Component ToggleThumbnails should render without crashing 1`] = `
<ToggleThumbnailsWidget
  activeColor="pink"
  style={
    Object {
      "fill": "black",
    }
  }
>
  <ToggleBase
    isVisible={true}
    setValue={[Function]}
    title="Toggle thumbnails"
  >
    <div
      style={
        Object {
          "display": "inline-block",
        }
      }
    >
      <WithStyles(ForwardRef(IconButton))
        color="primary"
        onClick={[Function]}
        title="Toggle thumbnails"
      >
        <ForwardRef(IconButton)
          classes={
            Object {
              "colorInherit": "MuiIconButton-colorInherit",
              "colorPrimary": "MuiIconButton-colorPrimary",
              "colorSecondary": "MuiIconButton-colorSecondary",
              "disabled": "Mui-disabled",
              "edgeEnd": "MuiIconButton-edgeEnd",
              "edgeStart": "MuiIconButton-edgeStart",
              "label": "MuiIconButton-label",
              "root": "MuiIconButton-root",
              "sizeSmall": "MuiIconButton-sizeSmall",
            }
          }
          color="primary"
          onClick={[Function]}
          title="Toggle thumbnails"
        >
          <WithStyles(ForwardRef(ButtonBase))
            centerRipple={true}
            className="MuiIconButton-root MuiIconButton-colorPrimary"
            disabled={false}
            focusRipple={true}
            onClick={[Function]}
            title="Toggle thumbnails"
          >
            <ForwardRef(ButtonBase)
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-colorPrimary"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              disabled={false}
              focusRipple={true}
              onClick={[Function]}
              title="Toggle thumbnails"
            >
              <button
                className="MuiButtonBase-root MuiIconButton-root MuiIconButton-colorPrimary"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                title="Toggle thumbnails"
                type="button"
              >
                <span
                  className="MuiIconButton-label"
                >
                  <svg
                    enableBackground="new 0 0 1000 1000"
                    style={
                      Object {
                        "fill": "pink",
                        "height": "1em",
                        "width": "1em",
                      }
                    }
                    version="1.1"
                    viewBox="0 0 1000 1000"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <g>
                      <path
                        d="M826.7,990H173.3C83.5,990,10,916.5,10,826.7V173.3C10,83.5,83.5,10,173.3,10h653.3C916.5,10,990,83.5,990,173.3v653.3C990,916.5,916.5,990,826.7,990z M173.3,91.7c-44.9,0-81.7,36.8-81.7,81.7v653.3c0,44.9,36.7,81.7,81.7,81.7h653.3c44.9,0,81.7-36.8,81.7-81.7V173.3c0-44.9-36.8-81.7-81.7-81.7H173.3z"
                      />
                      <path
                        d="M336.7,990c-24.5,0-40.8-16.3-40.8-40.8V50.8c0-24.5,16.3-40.8,40.8-40.8c24.5,0,40.8,16.3,40.8,40.8v898.3C377.5,973.7,361.2,990,336.7,990z"
                      />
                      <path
                        d="M581.7,540.8c-12.2,0-20.4-4.1-28.6-12.3c-16.3-16.3-16.3-40.8,0-57.2l122.5-122.5c16.3-16.3,40.8-16.3,57.2,0s16.3,40.8,0,57.2L610.3,528.6C602.1,536.8,593.9,540.8,581.7,540.8z"
                      />
                      <path
                        d="M704.2,663.3c-12.2,0-20.4-4.1-28.6-12.3L553.1,528.6c-16.3-16.3-16.3-40.8,0-57.2c16.3-16.3,40.8-16.3,57.2,0l122.5,122.5c16.3,16.3,16.3,40.8,0,57.2C724.6,659.3,716.4,663.3,704.2,663.3z"
                      />
                    </g>
                  </svg>
                </span>
                <WithStyles(memo)
                  center={true}
                >
                  <ForwardRef(TouchRipple)
                    center={true}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(IconButton)>
      </WithStyles(ForwardRef(IconButton))>
    </div>
  </ToggleBase>
</ToggleThumbnailsWidget>
`;

exports[`Component ToggleWatermark should render without crashing 1`] = `
<ToggleBase
  isVisible={false}
  setValue={[Function]}
  title="Toggle watermark"
>
  <Memo([object Object]) />
</ToggleBase>
`;
