// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Document Viewer component should render DocumentViewerError component if an error happens during fetching the document data 1`] = `
<Component
  options={
    Object {
      "getDocumentData": [Function],
    }
  }
>
  <ContextProvider
    value={
      Object {
        "addComment": "+ Add Comment",
        "avatarAlt": "Picture of the commenter",
        "cancelButton": "Cancel",
        "commentInputPlaceholder": "Make a comment",
        "commentSideBarTitle": "Comments",
        "delete": "Delete",
        "deleteCommentDialogBody": "1 comment is about to permanently deleted. <br /><strong>Warning: You can't undo this action.</strong>",
        "deleteCommentDialogTitle": "Delete comment?",
        "download": "Download",
        "errorLoadingDetails": "The following error occured during opening a document: ",
        "errorLoadingDocument": Array [
          Object {
            "details": "",
            "message": "No preview available, because the document is empty!",
            "state": 0,
          },
          Object {
            "code": 500,
            "details": "An unexpected error seems to have occured. Why not try refreshing your page? If the page still not working try to check back later.",
            "message": "Ooops! Something went wrong...",
            "state": 0,
          },
          Object {
            "code": 404,
            "details": "You don't have permission to see this document 
 The document you are trying to open has been deleted 
 The document has been moved to another place ",
            "message": "Ooops! Something went wrong...",
            "state": 0,
          },
          Object {
            "details": "",
            "message": "Error during preview generation! No preview available.",
            "state": -3,
          },
          Object {
            "details": "",
            "message": "The preview image generation has been postponed.",
            "state": -4,
          },
          Object {
            "details": "",
            "message": "No preview available, because this type of file is not supported!",
            "state": -2,
          },
          Object {
            "details": "",
            "message": "There is no preview provider enabled",
            "state": -5,
          },
        ],
        "firstPage": "First page",
        "gotoPage": "Goto page",
        "inputRequiredError": "The comment text is a required field.",
        "lastPage": "Last page",
        "loadingDocument": "Preview image generation is in progress",
        "markerRequiredError": "You must place the marker first.",
        "markerTooltip": "You can put a marker with this button",
        "nextPage": "Next page",
        "okButton": "Ok",
        "previousPage": "Previous page",
        "print": "Print",
        "regenerateButton": "Generate",
        "regeneratePreviews": "The preview images are not generated yet. Do you want to generate them?",
        "reloadPage": "Reload page",
        "rotateDocumentLeft": "Rotate document left",
        "rotateDocumentRight": "Rotate document right",
        "rotatePageLeft": "Rotate page left",
        "rotatePageRight": "Rotate page right",
        "saveChanges": "Save changes",
        "search": "Search",
        "share": "Share",
        "showLess": "+ Show less",
        "showMore": "+ Show more",
        "submit": "Submit",
        "toggleComments": "Toggle comments",
        "toggleRedaction": "Toggle redaction",
        "toggleShapes": "Toggle shapes",
        "toggleThumbnails": "Toggle thumbnails",
        "toggleWatermark": "Toggle watermark",
        "zoomIn": "Zoom in",
        "zoomOut": "Zoom out",
      }
    }
  >
    <ContextProvider
      value={
        Object {
          "api": Object {
            "getDocumentData": [Function],
          },
          "documentIdOrPath": 1,
          "theme": Object {},
        }
      }
    >
      <Component
        theme={Object {}}
      >
        <Component>
          <Component>
            <Component>
              <ContextConsumer>
                <Component />
              </ContextConsumer>
            </Component>
          </Component>
        </Component>
      </Component>
    </ContextProvider>
  </ContextProvider>
</Component>
`;

exports[`Document Viewer component should render DocumentViewerError component if an error happens during fetching the preview image data 1`] = `
<Component
  options={
    Object {
      "getExistingPreviewImages": [Function],
    }
  }
>
  <ContextProvider
    value={
      Object {
        "addComment": "+ Add Comment",
        "avatarAlt": "Picture of the commenter",
        "cancelButton": "Cancel",
        "commentInputPlaceholder": "Make a comment",
        "commentSideBarTitle": "Comments",
        "delete": "Delete",
        "deleteCommentDialogBody": "1 comment is about to permanently deleted. <br /><strong>Warning: You can't undo this action.</strong>",
        "deleteCommentDialogTitle": "Delete comment?",
        "download": "Download",
        "errorLoadingDetails": "The following error occured during opening a document: ",
        "errorLoadingDocument": Array [
          Object {
            "details": "",
            "message": "No preview available, because the document is empty!",
            "state": 0,
          },
          Object {
            "code": 500,
            "details": "An unexpected error seems to have occured. Why not try refreshing your page? If the page still not working try to check back later.",
            "message": "Ooops! Something went wrong...",
            "state": 0,
          },
          Object {
            "code": 404,
            "details": "You don't have permission to see this document 
 The document you are trying to open has been deleted 
 The document has been moved to another place ",
            "message": "Ooops! Something went wrong...",
            "state": 0,
          },
          Object {
            "details": "",
            "message": "Error during preview generation! No preview available.",
            "state": -3,
          },
          Object {
            "details": "",
            "message": "The preview image generation has been postponed.",
            "state": -4,
          },
          Object {
            "details": "",
            "message": "No preview available, because this type of file is not supported!",
            "state": -2,
          },
          Object {
            "details": "",
            "message": "There is no preview provider enabled",
            "state": -5,
          },
        ],
        "firstPage": "First page",
        "gotoPage": "Goto page",
        "inputRequiredError": "The comment text is a required field.",
        "lastPage": "Last page",
        "loadingDocument": "Preview image generation is in progress",
        "markerRequiredError": "You must place the marker first.",
        "markerTooltip": "You can put a marker with this button",
        "nextPage": "Next page",
        "okButton": "Ok",
        "previousPage": "Previous page",
        "print": "Print",
        "regenerateButton": "Generate",
        "regeneratePreviews": "The preview images are not generated yet. Do you want to generate them?",
        "reloadPage": "Reload page",
        "rotateDocumentLeft": "Rotate document left",
        "rotateDocumentRight": "Rotate document right",
        "rotatePageLeft": "Rotate page left",
        "rotatePageRight": "Rotate page right",
        "saveChanges": "Save changes",
        "search": "Search",
        "share": "Share",
        "showLess": "+ Show less",
        "showMore": "+ Show more",
        "submit": "Submit",
        "toggleComments": "Toggle comments",
        "toggleRedaction": "Toggle redaction",
        "toggleShapes": "Toggle shapes",
        "toggleThumbnails": "Toggle thumbnails",
        "toggleWatermark": "Toggle watermark",
        "zoomIn": "Zoom in",
        "zoomOut": "Zoom out",
      }
    }
  >
    <ContextProvider
      value={
        Object {
          "api": Object {
            "getExistingPreviewImages": [Function],
          },
          "documentIdOrPath": 1,
          "theme": Object {},
        }
      }
    >
      <Component
        theme={Object {}}
      >
        <Component>
          <Component>
            <Component>
              <ContextConsumer>
                <Component />
              </ContextConsumer>
            </Component>
          </Component>
        </Component>
      </Component>
    </ContextProvider>
  </ContextProvider>
</Component>
`;

exports[`Document Viewer component should render DocumentViewerError component if there were errors while preview generation and pageCount < 0 1`] = `
<Component
  api={
    Object {
      "canEditDocument": [Function],
      "canHideRedaction": [Function],
      "canHideWatermark": [Function],
      "getDocumentData": [Function],
    }
  }
  documentIdOrPath={1}
  theme={Object {}}
>
  <Component
    options={
      Object {
        "canEditDocument": [Function],
        "canHideRedaction": [Function],
        "canHideWatermark": [Function],
        "getDocumentData": [Function],
      }
    }
  >
    <Component
      theme={Object {}}
    >
      <Component />
    </Component>
  </Component>
</Component>
`;

exports[`Document Viewer component should render a DocumentViewerLoading  component if pageCount=-1 1`] = `
<Component
  api={
    Object {
      "canEditDocument": [Function],
      "canHideRedaction": [Function],
      "canHideWatermark": [Function],
      "getDocumentData": [Function],
    }
  }
  documentIdOrPath={1}
>
  <Component
    options={
      Object {
        "canEditDocument": [Function],
        "canHideRedaction": [Function],
        "canHideWatermark": [Function],
        "getDocumentData": [Function],
      }
    }
  >
    <Component
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {
            "MuiButton": Object {
              "root": Object {
                "textTransform": "none",
              },
            },
            "MuiCardContent": Object {
              "root": Object {
                "&:last-child": Object {
                  "paddingBottom": "16px",
                },
              },
            },
            "MuiDrawer": Object {
              "docked": Object {
                "backgroundColor": "#eaeaeb",
              },
              "paper": Object {
                "backgroundColor": "transparent",
              },
            },
            "MuiFilledInput": Object {
              "multiline": Object {
                "padding": "27px 0px 10px 10px",
              },
              "root": Object {
                "backgroundColor": "#fff",
              },
            },
            "MuiToolbar": Object {
              "root": Object {
                "backgroundColor": "#fff",
                "color": "#707070",
              },
            },
            "MuiTypography": Object {
              "h4": Object {
                "padding": "10px",
                "paddingBottom": "16px",
              },
            },
          },
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#f5f5f5",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(42, 101, 168)",
              "light": "rgb(99, 167, 243)",
              "main": "#3c91f1",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "rgb(178, 106, 0)",
              "light": "rgb(255, 172, 51)",
              "main": "#ff9800",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.167,
            },
            "h2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.2,
            },
            "h3": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.167,
            },
            "h4": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.235,
            },
            "h5": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "letterSpacing": "0em",
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1.25rem",
              "fontWeight": 500,
              "letterSpacing": "0.0075em",
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
        }
      }
    >
      <Component />
    </Component>
  </Component>
</Component>
`;

exports[`Document Viewer component should render a DocumentViewerRegeneratePreviews component if pageCount =-4 1`] = `
<Component
  api={
    Object {
      "canEditDocument": [Function],
      "canHideRedaction": [Function],
      "canHideWatermark": [Function],
      "getDocumentData": [Function],
    }
  }
  documentIdOrPath={1}
  theme={Object {}}
>
  <Component
    options={
      Object {
        "canEditDocument": [Function],
        "canHideRedaction": [Function],
        "canHideWatermark": [Function],
        "getDocumentData": [Function],
      }
    }
  >
    <Component
      theme={Object {}}
    >
      <Component />
    </Component>
  </Component>
</Component>
`;

exports[`Document Viewer component should render without crashing 1`] = `
<Component>
  <ContextProvider
    value={
      Object {
        "addComment": "+ Add Comment",
        "avatarAlt": "Picture of the commenter",
        "cancelButton": "Cancel",
        "commentInputPlaceholder": "Make a comment",
        "commentSideBarTitle": "Comments",
        "delete": "Delete",
        "deleteCommentDialogBody": "1 comment is about to permanently deleted. <br /><strong>Warning: You can't undo this action.</strong>",
        "deleteCommentDialogTitle": "Delete comment?",
        "download": "Download",
        "errorLoadingDetails": "The following error occured during opening a document: ",
        "errorLoadingDocument": Array [
          Object {
            "details": "",
            "message": "No preview available, because the document is empty!",
            "state": 0,
          },
          Object {
            "code": 500,
            "details": "An unexpected error seems to have occured. Why not try refreshing your page? If the page still not working try to check back later.",
            "message": "Ooops! Something went wrong...",
            "state": 0,
          },
          Object {
            "code": 404,
            "details": "You don't have permission to see this document 
 The document you are trying to open has been deleted 
 The document has been moved to another place ",
            "message": "Ooops! Something went wrong...",
            "state": 0,
          },
          Object {
            "details": "",
            "message": "Error during preview generation! No preview available.",
            "state": -3,
          },
          Object {
            "details": "",
            "message": "The preview image generation has been postponed.",
            "state": -4,
          },
          Object {
            "details": "",
            "message": "No preview available, because this type of file is not supported!",
            "state": -2,
          },
          Object {
            "details": "",
            "message": "There is no preview provider enabled",
            "state": -5,
          },
        ],
        "firstPage": "First page",
        "gotoPage": "Goto page",
        "inputRequiredError": "The comment text is a required field.",
        "lastPage": "Last page",
        "loadingDocument": "Preview image generation is in progress",
        "markerRequiredError": "You must place the marker first.",
        "markerTooltip": "You can put a marker with this button",
        "nextPage": "Next page",
        "okButton": "Ok",
        "previousPage": "Previous page",
        "print": "Print",
        "regenerateButton": "Generate",
        "regeneratePreviews": "The preview images are not generated yet. Do you want to generate them?",
        "reloadPage": "Reload page",
        "rotateDocumentLeft": "Rotate document left",
        "rotateDocumentRight": "Rotate document right",
        "rotatePageLeft": "Rotate page left",
        "rotatePageRight": "Rotate page right",
        "saveChanges": "Save changes",
        "search": "Search",
        "share": "Share",
        "showLess": "+ Show less",
        "showMore": "+ Show more",
        "submit": "Submit",
        "toggleComments": "Toggle comments",
        "toggleRedaction": "Toggle redaction",
        "toggleShapes": "Toggle shapes",
        "toggleThumbnails": "Toggle thumbnails",
        "toggleWatermark": "Toggle watermark",
        "zoomIn": "Zoom in",
        "zoomOut": "Zoom out",
      }
    }
  >
    <ContextProvider
      value={
        Object {
          "children": "some children",
          "documentIdOrPath": 1,
          "theme": Object {},
        }
      }
    >
      <Component
        theme={Object {}}
      >
        <Component>
          <Component>
            <Component>
              <ContextConsumer>
                <Component />
              </ContextConsumer>
            </Component>
          </Component>
        </Component>
      </Component>
    </ContextProvider>
  </ContextProvider>
</Component>
`;
