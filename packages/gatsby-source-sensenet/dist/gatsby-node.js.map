{"version":3,"sources":["../src/gatsby-node.ts"],"names":["DEFAULT_PATH","sourceNodes","actions","createNodeId","createContentDigest","options","path","console","log","params","ODataUrlBuilder","buildUrlParamString","defaultRepositoryConfiguration","oDataOptions","host","oDataToken","res","headers","Authorization","accessToken","method","data","json","rootNode","id","internal","content","type","snPrefix","contentDigest","description","createNode","d","results","forEach","level","error"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAEA,MAAMA,YAAY,GAAG,eAArB;;AAUO,MAAMC,WAAsC,GAAG,OACpD;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA;AAAzB,CADoD,EAEpDC,OAFoD,KAGjD;AACH,QAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,IAAgBN,YAA7B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;;AAEA,MAAI;AACF,UAAMG,MAAM,GAAGC,4BAAgBC,mBAAhB,CAAoCC,0CAApC,EAAoEP,OAAO,CAACQ,YAA5E,CAAf;;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAyB,GAAEH,OAAO,CAACS,IAAK,IAAGF,2CAA+BG,UAAW,GAAET,IAAK,IAAGG,MAAO,EAAtG;AAEA,UAAMO,GAAG,GAAG,MAAM,wBAAO,GAAEX,OAAO,CAACS,IAAK,IAAGF,2CAA+BG,UAAW,GAAET,IAAK,IAAGG,MAAO,EAApF,EAAuF;AACvGQ,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASb,OAAO,CAACc,WAAY;AADtC,OAD8F;AAIvGC,MAAAA,MAAM,EAAE;AAJ+F,KAAvF,CAAlB;AAOA,UAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AAEA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,EAAE,EAAErB,YAAY,CAAC,MAAD,CADD;AAEfsB,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE,oBADD;AAERC,QAAAA,IAAI,EAAG,GAAEC,eAAS,MAFV;AAGRC,QAAAA,aAAa,EAAEzB,mBAAmB,CAAC,MAAD,CAH1B;AAIR0B,QAAAA,WAAW,EAAG;AAJN;AAFK,KAAjB;AAUA5B,IAAAA,OAAO,CAAC6B,UAAR,CAAmBR,QAAnB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBe,QAAQ,CAACC,EAA9B;AAEAH,IAAAA,IAAI,CAACW,CAAL,CAAOC,OAAP,CAAeC,OAAf,CAAwBR,OAAD,IAAkB;AACvC,iCAAeH,QAAf,EAAyBG,OAAzB,EAAkCrB,OAAO,CAAC8B,KAA1C,EAAiDhC,YAAjD,EAA+DD,OAA/D,EAAwEE,mBAAxE,EAA6FC,OAA7F;AACD,KAFD;AAGD,GA7BD,CA6BE,OAAO+B,KAAP,EAAc;AACd7B,IAAAA,OAAO,CAACC,GAAR,CAAY4B,KAAZ;AACD;AACF,CAvCM","sourcesContent":["import { defaultRepositoryConfiguration, ODataParams, ODataUrlBuilder } from '@sensenet/client-core'\r\nimport { GatsbyNode, PluginOptions, SourceNodesArgs } from 'gatsby'\r\nimport fetch from 'node-fetch'\r\nimport { createTreeNode, snPrefix } from './utils'\r\n\r\nconst DEFAULT_PATH = '/Root/Content'\r\n\r\nexport interface PluginConfig extends PluginOptions {\r\n  host: string\r\n  path: string\r\n  oDataOptions: ODataParams<any>\r\n  accessToken: string\r\n  level: number\r\n}\r\n\r\nexport const sourceNodes: GatsbyNode['sourceNodes'] = async (\r\n  { actions, createNodeId, createContentDigest }: SourceNodesArgs,\r\n  options: PluginConfig,\r\n) => {\r\n  const path = options.path || DEFAULT_PATH\r\n  console.log('PATH', path)\r\n\r\n  try {\r\n    const params = ODataUrlBuilder.buildUrlParamString(defaultRepositoryConfiguration, options.oDataOptions)\r\n    console.log('REQUEST:', `${options.host}/${defaultRepositoryConfiguration.oDataToken}${path}?${params}`)\r\n\r\n    const res = await fetch(`${options.host}/${defaultRepositoryConfiguration.oDataToken}${path}?${params}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${options.accessToken}`,\r\n      },\r\n      method: 'GET',\r\n    })\r\n\r\n    const data = await res.json()\r\n\r\n    const rootNode = {\r\n      id: createNodeId('root'),\r\n      internal: {\r\n        content: '{{ Name: \"root\" }}',\r\n        type: `${snPrefix}root`,\r\n        contentDigest: createContentDigest('root'),\r\n        description: `root node`,\r\n      },\r\n    }\r\n\r\n    actions.createNode(rootNode)\r\n    console.log('root:', rootNode.id)\r\n\r\n    data.d.results.forEach((content: any) => {\r\n      createTreeNode(rootNode, content, options.level, createNodeId, actions, createContentDigest, options)\r\n    })\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n"],"file":"gatsby-node.js"}