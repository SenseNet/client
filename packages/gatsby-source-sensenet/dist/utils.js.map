{"version":3,"sources":["../src/utils.ts"],"names":["snPrefix","createTreeNode","parentNode","content","level","createNodeId","actions","createContentDigest","options","newNode","id","Type","Id","internal","type","contentDigest","description","createNode","createParentChildLink","parent","child","res","host","defaultRepositoryConfiguration","oDataToken","Path","headers","Authorization","accessToken","method","data","json","d","results","length","forEach","childContent","error","console","log"],"mappings":";;;;;;;AAAA;;AAEA;;AAEO,MAAMA,QAAQ,GAAG,UAAjB;;;AAEA,MAAMC,cAAc,GAAG,OAC5BC,UAD4B,EAE5BC,OAF4B,EAG5BC,KAH4B,EAI5BC,YAJ4B,EAK5BC,OAL4B,EAM5BC,mBAN4B,EAO5BC,OAP4B,KAQzB;AACH,QAAMC,OAAO,GAAG,EACd,GAAGN,OADW;AAEdO,IAAAA,EAAE,EAAEL,YAAY,CAAE,GAAEF,OAAO,CAACQ,IAAK,IAAGR,OAAO,CAACS,EAAG,EAA/B,CAFF;AAGdC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAG,GAAEd,QAAS,GAAEG,OAAO,CAACQ,IAAK,EADzB;AAERI,MAAAA,aAAa,EAAER,mBAAmB,CAACJ,OAAD,CAF1B;AAGRa,MAAAA,WAAW,EAAG,GAAEb,OAAO,CAACQ,IAAK;AAHrB;AAHI,GAAhB;AAUAL,EAAAA,OAAO,CAACW,UAAR,CAAmBR,OAAnB;AACAH,EAAAA,OAAO,CAACY,qBAAR,CAA8B;AAAEC,IAAAA,MAAM,EAAEjB,UAAV;AAAsBkB,IAAAA,KAAK,EAAEX;AAA7B,GAA9B;;AAEA,MAAI;AACF,QAAKL,KAAK,IAAIA,KAAK,GAAG,CAAlB,IAAwB,CAACA,KAA7B,EAAoC;AAClC,YAAMiB,GAAG,GAAG,MAAM,wBAAO,GAAEb,OAAO,CAACc,IAAK,IAAGC,2CAA+BC,UAAW,GAAErB,OAAO,CAACsB,IAAK,EAAlF,EAAqF;AACrGC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASnB,OAAO,CAACoB,WAAY;AADtC,SAD4F;AAIrGC,QAAAA,MAAM,EAAE;AAJ6F,OAArF,CAAlB;AAOA,YAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;AAEAD,MAAAA,IAAI,CAACE,CAAL,CAAOC,OAAP,CAAeC,MAAf,GAAwB,CAAxB,IACEJ,IAAI,CAACE,CAAL,CAAOC,OAAP,CAAeE,OAAf,CAAwBC,YAAD,IAAuB;AAC5CnC,QAAAA,cAAc,CAACQ,OAAD,EAAU2B,YAAV,EAAwBhC,KAAK,GAAG,CAAhC,EAAmCC,YAAnC,EAAiDC,OAAjD,EAA0DC,mBAA1D,EAA+EC,OAA/E,CAAd;AACD,OAFD,CADF;AAID;AACF,GAhBD,CAgBE,OAAO6B,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAzCM","sourcesContent":["import { defaultRepositoryConfiguration } from '@sensenet/client-core'\r\nimport { Actions } from 'gatsby'\r\nimport fetch from 'node-fetch'\r\nimport { PluginConfig } from './gatsby-node'\r\nexport const snPrefix = 'sensenet'\r\n\r\nexport const createTreeNode = async (\r\n  parentNode: any,\r\n  content: any,\r\n  level: number,\r\n  createNodeId: { (input: string): string; (arg0: string): any },\r\n  actions: Actions,\r\n  createContentDigest: { (input: string | object): string; (arg0: any): any },\r\n  options: PluginConfig,\r\n) => {\r\n  const newNode = {\r\n    ...content,\r\n    id: createNodeId(`${content.Type}-${content.Id}`),\r\n    internal: {\r\n      type: `${snPrefix}${content.Type}`,\r\n      contentDigest: createContentDigest(content),\r\n      description: `${content.Type} node`,\r\n    },\r\n  }\r\n\r\n  actions.createNode(newNode)\r\n  actions.createParentChildLink({ parent: parentNode, child: newNode })\r\n\r\n  try {\r\n    if ((level && level > 0) || !level) {\r\n      const res = await fetch(`${options.host}/${defaultRepositoryConfiguration.oDataToken}${content.Path}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${options.accessToken}`,\r\n        },\r\n        method: 'GET',\r\n      })\r\n\r\n      const data = await res.json()\r\n\r\n      data.d.results.length > 0 &&\r\n        data.d.results.forEach((childContent: any) => {\r\n          createTreeNode(newNode, childContent, level - 1, createNodeId, actions, createContentDigest, options)\r\n        })\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n"],"file":"utils.js"}